[project]
name = "cibuildwheel"
authors = [
    {name = "Joe Rickerby", email = "joerick@mac.com"},
]
description = "Build Python wheels on CI with minimal configuration."
readme = "README.md"
long_description = "README.md"
long_description_content_type = "text/markdown"
license_files = "LICENSE"
requires-python = ">=3.7"
include_package_data = true
zip_safe = false
keywords = [
  "ci",
  "wheel",
  "packaging",
  "pypi",
  "travis",
  "appveyor",
  "macos",
  "linux",
  "windows",
]
license = {text = "BSD-2-Clause"}
url = "https://github.com/pypa/cibuildwheel"
project_urls = {
    Changelog = "https://github.com/pypa/cibuildwheel#changelog"
    Documentation = "https://cibuildwheel.readthedocs.io/"
}
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Software Development :: Build Tools",
]
dependencies = [
    "bashlex!=0.13",
    "bracex",
    "certifi",
    "filelock",
    "packaging>=20.9",
    "platformdirs",
    "tomli;python_version < '3.11'",
    "typing-extensions>=4.1.0;python_version < '3.11'",
]
dynamic = ["version"]

[console_scripts]
cibuildwheel = "cibuildwheel.__main__:main"

[tool.setuptools.dynamic]
version = {attr = "cibuildwheel.__version__"}

[tool.setuptools.packages.find]
# where = ["src"]  # list of folders that contain the packages (["."] by default)
include = ["cibuildwheel*"]  # package names should match these glob patterns (["*"] by default)

[tool.setuptools.package-data]
cibuildwheel = ["resources/*"]

[build-system]
requires = [
    "setuptools>=42",
]
build-backend = "setuptools.build_meta"


[tool.black]
line-length = 100
target-version = ['py37', 'py38', 'py39', 'py310', 'py311']


[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
junit_family = "xunit2"
testpaths = [
    "test",
    "unit_test",
]
xfail_strict = true
filterwarnings = ["error"]
log_cli_level = "info"


[tool.mypy]
python_version = 3.7
files = [
    "cibuildwheel/*.py",
    "test/**/*.py",
    "unit_test/**/*.py",
    "bin/*.py",
    "noxfile.py",
]
warn_unused_configs = true
show_error_codes = true

warn_redundant_casts = true
no_implicit_reexport = true
strict_equality = true
warn_unused_ignores = true
check_untyped_defs = true

disallow_subclassing_any = true
disallow_any_generics = true
warn_return_any = true
no_implicit_optional = true

enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true

[[tool.mypy.overrides]]
module = "cibuildwheel.*"
disallow_untyped_defs = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true

[[tool.mypy.overrides]]
module = [
    "setuptools",
    "pytest", # ignored in pre-commit to speed up check
    "bashlex",
    "bashlex.*",
    "importlib_resources",
]
ignore_missing_imports = true


[tool.check-manifest]
ignore = [
    ".*",
    ".circleci/**",
    "test/**",
    "unit_test/**",
    "docs/**",
    "examples/**",
    "bin/**",
    "*.yml",
    "CI.md",  # TODO: can change test/test_ssl and remove this
    "requirements-dev.txt",
    "noxfile.py",
]

[tool.pylint]
py-version = "3.7"
jobs = "0"
fail-on = ["E", "F"]
fail-under = "9.8"
reports.output-format = "colorized"
messages_control.enable = [
  "useless-suppression",
]
messages_control.disable = [
  "abstract-class-instantiated",  # filelock triggers this
  "duplicate-code",
  "fixme",
  "invalid-name",
  "line-too-long",
  "missing-class-docstring",
  "missing-function-docstring",
  "missing-module-docstring",
  "no-else-break",
  "no-else-return",
  "protected-access",
  "too-few-public-methods",
  "too-many-arguments",
  "too-many-branches",
  "too-many-instance-attributes",
  "too-many-lines",
  "too-many-locals",
  "too-many-nested-blocks",
  "too-many-return-statements",
  "too-many-statements",
  "unsubscriptable-object",
  "wrong-import-position",
  "unused-argument",  # Handled by Ruff
  "broad-exception-raised",  # Could be improved eventually
]

[tool.ruff]
select = [
  "E", "F", "W", # flake8
  "B",           # flake8-bugbear
  "I",           # isort
  "ARG",         # flake8-unused-arguments
  "C4",          # flake8-comprehensions
  "EM",          # flake8-errmsg
  "ICN",         # flake8-import-conventions
  "ISC",         # flake8-implicit-str-concat
  "G",           # flake8-logging-format
  "PGH",         # pygrep-hooks
  "PIE",         # flake8-pie
  "PL",          # pylint
  "PT",          # flake8-pytest-style
  "RET",         # flake8-return
  "RUF",         # Ruff-specific
  "SIM",         # flake8-simplify
  "TID251",      # flake8-tidy-imports.banned-api
  "UP",          # pyupgrade
  "YTT",         # flake8-2020
  "EXE",         # flake8-executable
]
extend-ignore = [
  "PLR",    # Design related pylint codes
  "E501",   # Line too long
  "RET504", "RET505", "RET508",  # else after control flow
  "PT004",  # Rename suggested for returnless fixtures
  "PT007",  # False positive (fixed upstream)
]
target-version = "py37"
typing-modules = ["cibuildwheel._compat.typing"]
flake8-unused-arguments.ignore-variadic-names = true

[tool.ruff.flake8-tidy-imports.banned-api]
"typing.Mapping".msg = "Use collections.abc.Mapping instead."
"typing.Callable".msg = "Use collections.abc.Callable instead."
"typing.Iterator".msg = "Use collections.abc.Iterator instead."
"typing.Sequence".msg = "Use collections.abc.Sequence instead."
"typing.Set".msg = "Use collections.abc.Set instead."
"typing.Protocol".msg = "Use cibuildwheel._compat.typing.Protocol instead."
"typing.Final".msg = "Use cibuildwheel._compat.typing.Final instead."
"typing.Literal".msg = "Use cibuildwheel._compat.typing.Literal instead."
"typing.OrderedDict".msg = "Use cibuildwheel._compat.typing.OrderedDict instead."
"typing.TypedDict".msg = "Use cibuildwheel._compat.typing.TypedDict instead."
"typing.NotRequired".msg = "Use cibuildwheel._compat.typing.NotRequired instead."
"typing.assert_never".msg = "Use cibuildwheel._compat.typing.assert_never instead."
"tomllib".msg = "Use cibuildwheel._compat.tomllib instead."
"tomli".msg = "Use cibuildwheel._compat.tomllib instead."

[tool.ruff.per-file-ignores]
"unit_test/*" = ["PLC1901"]
